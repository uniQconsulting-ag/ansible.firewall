
{% if firewall_table_name is defined and firewall_table_name is not none %}
# drop any existing nftables ruleset
flush ruleset

# table inet ansible_debug {
#         chain INPUT {
#                 type filter hook input priority -10 ; policy accept
#                 log flags all prefix "INPUT DEBUG: "
#         }
#         chain FORWARD {
#                 type filter hook forward priority -10 ; policy accept
#                 log flags all prefix "FORWARD DEBUG: "
#         }
#         chain OUTPUT {
#                 type filter hook output priority -10 ; policy accept
#                 log flags all prefix "OUTPUT DEBUG: "
#         }
#         chain PREROUTING {
#                 type filter hook prerouting priority -10 ; policy accept
#                 log flags all prefix "PREROUTING DEBUG: "
#         }
#         chain POSTROUTING {
#                 type filter hook postrouting priority -10 ; policy accept
#                 log flags all prefix "POSTROUTING DEBUG: "
#         }
# }
{% endif %}

# a common table for both IPv4 and IPv6
table inet ansible_{{ firewall_table_name | default('default') }} {

        ##########
        # FILTER
        ##########

        chain INPUT {
                {% if firewall_table_name is defined and firewall_table_name is not none %}
                # Default Settings
                type filter hook input priority 1
                policy accept # Drop Rule

                # Basic rules
                ct state established,related accept

                # Allow icmp
                meta l4proto { icmp, icmpv6 } accept

                # Allow loop interface
                iifname { "lo" } accept
                {% endif %}

                # Open Ports
                {% for port in firewall_open_ports %}
                # accept = mark set 10
                {{ port.protocol }} dport {{ port.port }} {% if port.source is defined and port.source is not none %} ip saddr {{ port.source }}{% endif %} mark set 10
                {% endfor %}

                # Save marks persistently
                ct mark set mark
        }

        chain FORWARD {
                # Default Settings
                type filter hook forward priority 1
                policy accept

                # Open Ports
                {% for frw in firewall_port_forwarding %}
                # accept = mark set 10
                {% if frw.dest_interface is defined %}oifname {{ frw.dest_interface }}{% endif %} {% if frw.src_interface is defined and frw.src_interface is not none %} iifname {{ port.source }}{% endif %} meta l4proto {{ frw.protocol }} {{ frw.protocol }} dport {{ frw.dest_port }} ip daddr {{ frw.dest_ip }} mark set 10
                {% endfor %}

                # Save marks persistently
                ct mark set mark
        }

        chain OUTPUT {
                # Default Settings
                type filter hook output priority 1
                policy accept

                # Allow All Interfaces
                iifname {{ "{" }} "{{ ansible_interfaces | join '", "' }}" {{ "}" }} accept

                # Save marks persistently
                ct mark set mark
        }
        
        ##########
        #   NAT
        ##########

        chain OUTPUT {
                # Default Settings
                type nat hook output priority 1
                policy accept

                # Outward natting
                {% for frw in firewall_local_port_forwarding %}
                {{ frw.protocol }} dport {{ frw.src_port }} redirect to {{ frw.dest_port }}
                {% endfor %}

                # Save marks persistently
                ct mark set mark
        }

        chain PREROUTING {
                # Default Settings
                type nat hook prerouting priority 1
                policy accept

                # Port Forwarding
                # like: ip daddr 123.4.56.78 tcp dport 8443 dnat 10.0.0.2:8443
                {% for frw in firewall_port_forwarding %}
                {% if frw.src_ip is defined %}ip daddr {{ frw.src_ip }}{% endif %} {{ frw.protocol }} dport {{ frw.src_port }} dnat {{ frw.dest_ip }}:{{ frw.dest_port }}
                {% endfor %}

                # Local Port Forwarding
                # like: tcp dport 514 redirect to 1514
                {% for frw in firewall_local_port_forwarding %}
                {{ frw.protocol }} dport {{ frw.src_port }} redirect to {{ frw.dest_port }}
                {% endfor %}

                # Save marks persistently
                ct mark set mark
        }

        chain POSTROUTING {
                # Default Settings
                type nat hook postrouting priority 1
                policy accept

                # Outward natting
                {% for itemset in firewall_snat_interfaces %}
                oifname {{ itemset.interface }} snat {{ itemset.ip }}
                {% endfor %}

                # Save marks persistently
                ct mark set mark
        }

}

{% if firewall_table_name is defined and firewall_table_name is not none %}
table inet ansible_DROPALL {

        chain INPUT {
                # Default Settings
                type filter hook input priority 999
                policy accept

                # Restore Marks
                meta mark set ct mark

                # Process previously marked packets
                meta mark 10 accept # 10 = accepted by filter rule
                
                # Drop All
                log flags all prefix "INPUT DROP: "
                reject with icmpx type port-unreachable
        }

        chain FORWARD {
                # Default Settings
                type filter hook forward priority 999
                policy accept

                # Process previously marked packets
                meta mark 10 accept # 10 = accepted by filter rule
                
                # Drop All
                log flags all prefix "FORWARD DROP: "
                reject with icmpx type port-unreachable
        }
}

# Include sub-config files
include "/etc/nftables/conf.d/*.nft"
{% endif %}
